// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: controller.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SetupService_ConfigurationRequest_FullMethodName = "/controller.SetupService/ConfigurationRequest"
	SetupService_ImageRequest_FullMethodName         = "/controller.SetupService/ImageRequest"
	SetupService_ModuleRequest_FullMethodName        = "/controller.SetupService/ModuleRequest"
)

// SetupServiceClient is the client API for SetupService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SetupServiceClient interface {
	ConfigurationRequest(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AgentConfiguration, error)
	ImageRequest(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ImageStreamData], error)
	ModuleRequest(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ModuleConfigurations, error)
}

type setupServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSetupServiceClient(cc grpc.ClientConnInterface) SetupServiceClient {
	return &setupServiceClient{cc}
}

func (c *setupServiceClient) ConfigurationRequest(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AgentConfiguration, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AgentConfiguration)
	err := c.cc.Invoke(ctx, SetupService_ConfigurationRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *setupServiceClient) ImageRequest(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ImageStreamData], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SetupService_ServiceDesc.Streams[0], SetupService_ImageRequest_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[emptypb.Empty, ImageStreamData]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SetupService_ImageRequestClient = grpc.ServerStreamingClient[ImageStreamData]

func (c *setupServiceClient) ModuleRequest(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ModuleConfigurations, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ModuleConfigurations)
	err := c.cc.Invoke(ctx, SetupService_ModuleRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SetupServiceServer is the server API for SetupService service.
// All implementations must embed UnimplementedSetupServiceServer
// for forward compatibility.
type SetupServiceServer interface {
	ConfigurationRequest(context.Context, *emptypb.Empty) (*AgentConfiguration, error)
	ImageRequest(*emptypb.Empty, grpc.ServerStreamingServer[ImageStreamData]) error
	ModuleRequest(context.Context, *emptypb.Empty) (*ModuleConfigurations, error)
	mustEmbedUnimplementedSetupServiceServer()
}

// UnimplementedSetupServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSetupServiceServer struct{}

func (UnimplementedSetupServiceServer) ConfigurationRequest(context.Context, *emptypb.Empty) (*AgentConfiguration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigurationRequest not implemented")
}
func (UnimplementedSetupServiceServer) ImageRequest(*emptypb.Empty, grpc.ServerStreamingServer[ImageStreamData]) error {
	return status.Errorf(codes.Unimplemented, "method ImageRequest not implemented")
}
func (UnimplementedSetupServiceServer) ModuleRequest(context.Context, *emptypb.Empty) (*ModuleConfigurations, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModuleRequest not implemented")
}
func (UnimplementedSetupServiceServer) mustEmbedUnimplementedSetupServiceServer() {}
func (UnimplementedSetupServiceServer) testEmbeddedByValue()                      {}

// UnsafeSetupServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SetupServiceServer will
// result in compilation errors.
type UnsafeSetupServiceServer interface {
	mustEmbedUnimplementedSetupServiceServer()
}

func RegisterSetupServiceServer(s grpc.ServiceRegistrar, srv SetupServiceServer) {
	// If the following call pancis, it indicates UnimplementedSetupServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SetupService_ServiceDesc, srv)
}

func _SetupService_ConfigurationRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SetupServiceServer).ConfigurationRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SetupService_ConfigurationRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SetupServiceServer).ConfigurationRequest(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SetupService_ImageRequest_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SetupServiceServer).ImageRequest(m, &grpc.GenericServerStream[emptypb.Empty, ImageStreamData]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SetupService_ImageRequestServer = grpc.ServerStreamingServer[ImageStreamData]

func _SetupService_ModuleRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SetupServiceServer).ModuleRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SetupService_ModuleRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SetupServiceServer).ModuleRequest(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// SetupService_ServiceDesc is the grpc.ServiceDesc for SetupService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SetupService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "controller.SetupService",
	HandlerType: (*SetupServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConfigurationRequest",
			Handler:    _SetupService_ConfigurationRequest_Handler,
		},
		{
			MethodName: "ModuleRequest",
			Handler:    _SetupService_ModuleRequest_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ImageRequest",
			Handler:       _SetupService_ImageRequest_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "controller.proto",
}

const (
	PhonehomeService_Phonehome_FullMethodName = "/controller.PhonehomeService/Phonehome"
)

// PhonehomeServiceClient is the client API for PhonehomeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PhonehomeServiceClient interface {
	Phonehome(ctx context.Context, in *PhonehomeData, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type phonehomeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPhonehomeServiceClient(cc grpc.ClientConnInterface) PhonehomeServiceClient {
	return &phonehomeServiceClient{cc}
}

func (c *phonehomeServiceClient) Phonehome(ctx context.Context, in *PhonehomeData, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PhonehomeService_Phonehome_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PhonehomeServiceServer is the server API for PhonehomeService service.
// All implementations must embed UnimplementedPhonehomeServiceServer
// for forward compatibility.
type PhonehomeServiceServer interface {
	Phonehome(context.Context, *PhonehomeData) (*emptypb.Empty, error)
	mustEmbedUnimplementedPhonehomeServiceServer()
}

// UnimplementedPhonehomeServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPhonehomeServiceServer struct{}

func (UnimplementedPhonehomeServiceServer) Phonehome(context.Context, *PhonehomeData) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Phonehome not implemented")
}
func (UnimplementedPhonehomeServiceServer) mustEmbedUnimplementedPhonehomeServiceServer() {}
func (UnimplementedPhonehomeServiceServer) testEmbeddedByValue()                          {}

// UnsafePhonehomeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PhonehomeServiceServer will
// result in compilation errors.
type UnsafePhonehomeServiceServer interface {
	mustEmbedUnimplementedPhonehomeServiceServer()
}

func RegisterPhonehomeServiceServer(s grpc.ServiceRegistrar, srv PhonehomeServiceServer) {
	// If the following call pancis, it indicates UnimplementedPhonehomeServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PhonehomeService_ServiceDesc, srv)
}

func _PhonehomeService_Phonehome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PhonehomeData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhonehomeServiceServer).Phonehome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PhonehomeService_Phonehome_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhonehomeServiceServer).Phonehome(ctx, req.(*PhonehomeData))
	}
	return interceptor(ctx, in, info, handler)
}

// PhonehomeService_ServiceDesc is the grpc.ServiceDesc for PhonehomeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PhonehomeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "controller.PhonehomeService",
	HandlerType: (*PhonehomeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Phonehome",
			Handler:    _PhonehomeService_Phonehome_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "controller.proto",
}

const (
	ReceiveService_PushData_FullMethodName = "/controller.ReceiveService/PushData"
)

// ReceiveServiceClient is the client API for ReceiveService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReceiveServiceClient interface {
	PushData(ctx context.Context, in *ModuleControllerData, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type receiveServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReceiveServiceClient(cc grpc.ClientConnInterface) ReceiveServiceClient {
	return &receiveServiceClient{cc}
}

func (c *receiveServiceClient) PushData(ctx context.Context, in *ModuleControllerData, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ReceiveService_PushData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReceiveServiceServer is the server API for ReceiveService service.
// All implementations must embed UnimplementedReceiveServiceServer
// for forward compatibility.
type ReceiveServiceServer interface {
	PushData(context.Context, *ModuleControllerData) (*emptypb.Empty, error)
	mustEmbedUnimplementedReceiveServiceServer()
}

// UnimplementedReceiveServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedReceiveServiceServer struct{}

func (UnimplementedReceiveServiceServer) PushData(context.Context, *ModuleControllerData) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushData not implemented")
}
func (UnimplementedReceiveServiceServer) mustEmbedUnimplementedReceiveServiceServer() {}
func (UnimplementedReceiveServiceServer) testEmbeddedByValue()                        {}

// UnsafeReceiveServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReceiveServiceServer will
// result in compilation errors.
type UnsafeReceiveServiceServer interface {
	mustEmbedUnimplementedReceiveServiceServer()
}

func RegisterReceiveServiceServer(s grpc.ServiceRegistrar, srv ReceiveServiceServer) {
	// If the following call pancis, it indicates UnimplementedReceiveServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ReceiveService_ServiceDesc, srv)
}

func _ReceiveService_PushData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModuleControllerData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceiveServiceServer).PushData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReceiveService_PushData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceiveServiceServer).PushData(ctx, req.(*ModuleControllerData))
	}
	return interceptor(ctx, in, info, handler)
}

// ReceiveService_ServiceDesc is the grpc.ServiceDesc for ReceiveService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReceiveService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "controller.ReceiveService",
	HandlerType: (*ReceiveServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PushData",
			Handler:    _ReceiveService_PushData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "controller.proto",
}
